Lab 08: Copy Constructor, Assignment Operator and Dynamic Memory Allocation/Deallocation

- Dynamic 2D Array Using Double Pointer:

#include <iostream>
using std::cout;
using std::endl;

int main ()
{
	int rows = 3;
	int cols = 4;

	int **Matrix;
	Matrix = new int*[rows];
	
	for (int i = 0; i < rows; i++)
		Matrix[i] = new int[cols];

	for (int i=0; i<rows; i++)
	{
		for (int j=0; j<cols; j++)
			cout << i << " " << j << " = " << Matrix[i][j] << "  ";
		cout << endl;
	}
	
	for (int i = 0; i < rows; i++)
		delete [] Matrix[i];

	delete [] Matrix;

	return 0;
}

- Dynamic 2D Array Using Single Pointer:

#include <iostream>
using std::cout;
using std::endl;

int main ()
{
	int rows = 3;
	int cols = 4;

	int *Matrix;
	Matrix = new int[rows*cols];
	
	for (int i=0; i<rows; i++)
	{
		for (int j=0; j<cols; j++)
			cout << i << " " << j << " = " << Matrix[i*cols + j] << "  ";
		cout << endl;
	}

	delete [] Matrix;

	return 0;
}

Lab 08 Task(s):
- Create a Matrix class.
- Matrix data must be dyanmic. 
- Provide user the option to dynamically create a Matrix of any dimensions. 1 Mark
- Overload the << and >> operators. 2 Marks
- Overload copy constructor and assignment operator for copying two Matrix objects. 2 Marks
- Properly deallocate any dynamically assigned memory in destructor. 1 Mark

- * Do this using either double or single pointer. 
- * Extra marks for added functionality to handle 3D matrices. +1 Mark
- * Extra marks for doing this both ways, with double and single pointers. +2 Marks
- * Extra marks for proper indentation and creativity. +1 Mark
